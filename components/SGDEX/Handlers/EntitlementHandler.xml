<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2018 Roku, Inc. All rights reserved. -->

<!-- 
    @Public
    In order to use EntitlementView in the channel app, you need to implement your handler extended from EntitlementHandler.


    EntitlementHandler allows developer to implement their business logic for
    - handling RokuPay subscription (Roku Billing)
    - handling username/password authentication


    depending on EntitlementView.mode.


    In EntitlementView.mode = "RokuBilling", developer is able to override the following functions:
    - sub ConfigureEntitlements(config as Object)  [Required]
    - sub OnPurchaseSuccess(transactionData as Object)  [Optional]
    
    
    "RokuBilling" mode now supports not only regular RokuPay purchase but also [on-device upgrade/downgrade](https://developer.roku.com/docs/developer-program/roku-pay/implementation/on-device-upgrade-downgrade.md).
    Developer must populate config.catalogProducts in their ConfigureEntitlements(config) implementation to specify products to be offered to the user for purchase or upgrade/downgrade.
    
    
    sub ConfigureEntitlements(config as Object)
    - provides config object prepopulated with config.catalogProducts and config.purchases
    - you must override this function in your handler extended from EntitlementHandler
    - config.catalogProducts - contains array of catalog products per roChannelStore.GetCatalog()
    - config.purchases - contains array of purchases per roChannelStore.GetPurchases()
    - for silentCheckEntitlement flow you must specify config.isSubscribed: true if user has active subscription, false otherwise
    - for subscription purchase/upgrade/downgrade flow you must populate config.displayProducts with the list of products to be displayed to the user
    
    
    Each item in config.displayProducts should be AA containing the following fields
    - code [String] product code
    - name [String] optional, product display name; if not specified, SGDEX will use the Channel Store data
    - action [String] optional, allows to specify product action for on-device upgrade/downgrade; supported values are "upgrade" and "downgrade", case insensitive


    If _action_ is set to "upgrade" or "downgrade" then
    - SGDEX assumes this is a product for upgrade or downgrade operation, respectively, not for a regular purchase
    - if user selects this product then SGDEX initiates upgrade/downgrade operation, essentially subscription change to this product instead of a regular purchase
    - on the Channel Store side, developer must add products to be used for upgrade/downgrade [to a product group](https://developer.roku.com/docs/developer-program/roku-pay/quickstart/in-channel-products.md#adding-product-groups) in order to indicate that these are mutually exclusive


    if _action_ is not specified or set to some unsupported value then SGDEX treats this as a regular purchase product, not for upgrade/downgrade.
    
    
    sub OnPurchaseSuccess(transactionData as Object)
    - if overridden, allows developer to implement some business logic on subscription purchase success
    - transactionData - AA containing RokuPay transaction data per Channel Store response
    - default implementation does nothing
    
    
    In EntitlementView.mode = "UserPass", developer is able to override the following functions
    - function CheckAuthentication() as Boolean
    - function Authenticate(username as String, password as String) as Boolean
    - function DeAuthenticate() as Boolean 
    
    
    CheckAuthentication()
    - here you should implement the business logic to validate user authentication state (silentCheckAuthentication)
    - return value should be true if user is authenticated, false otherwise
    
    
    Authenticate(username, password)
    - here you should implement the business logic for authentication by username and password
    - return value should be true if successfully authenticated, false otherwise
    
    
    DeAuthenticate()
     - here you should implement the business logic to de-authenticate user (silentDeAuthenticate)
     - return value should indicate result of the operation and be true if successfully de-authenticated, false otherwise


    See EntitlementView documentation for usage samples.
-->

<component name="EntitlementHandler" extends="Task" xsi:noNamespaceSchemaLocation="https://devtools.web.roku.com/schema/RokuSceneGraph.xsd">
    <interface>
        <!-- @Public  -->
        <!-- Content node from EntitlementView will be passed here, developer can use it in handler.  -->
        <field id="content" type="node" />

        <!-- @Public  -->
        <!-- View is a reference to EntitlementView where this Handler is created.  -->
        <field id="view" type="node" />
    </interface>
    
    <script type="text/brightscript" uri="EntitlementHandler.brs" />
    <script type="text/brightscript" uri="EntitlementHandler_RokuBilling.brs" />
    <script type="text/brightscript" uri="EntitlementHandler_UserPass.brs" />
    <script type="text/brightscript" uri="EntitlementHandler_TVOD.brs" />
</component>
